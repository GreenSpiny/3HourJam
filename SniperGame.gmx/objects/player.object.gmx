<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>player_spr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create a raycaster

ray = instance_create( x, y, raycaster );
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Positions

posIndex = 0;

pos = false;
posCount = 0;

var margin = 64;

pos[posCount, 0] = margin;
pos[posCount, 1] = margin;
posCount += 1;

pos[posCount, 0] = margin;
pos[posCount, 1] = room_height / 2;
posCount += 1;

pos[posCount, 0] = margin;
pos[posCount, 1] = room_height - margin;
posCount += 1;

pos[posCount, 0] = room_width / 2;
pos[posCount, 1] = room_height - margin;
posCount += 1;

pos[posCount, 0] = room_width - margin;
pos[posCount, 1] = room_height - margin;
posCount += 1;

pos[posCount, 0] = room_width - margin;
pos[posCount, 1] = room_height / 2;
posCount += 1;

pos[posCount, 0] = room_width - margin;
pos[posCount, 1] = margin;
posCount += 1;

pos[posCount, 0] = room_width / 2;
pos[posCount, 1] = margin;
posCount += 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy raycaster

with ( ray ) instance_destroy( );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move to position

var spd = 0.05;
x = lerp( x, pos[posIndex, 0], spd );
y = lerp( y, pos[posIndex, 1], spd );
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update ray

with ( ray ) {
    x = other.x;
    y = other.y;
    goalX = mouse_x;
    goalY = mouse_y;
    event_user( 1 );
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for fire

if ( mouse_check_button_pressed( mb_left ) ) {
    with ( ray ) {
        event_user( 1 );
        var pts = false;
        var ptsCount = 0;
        for ( var i = 0; i &lt; collisionCount; ++i ) {
            pts[ptsCount++] = collision[i, 0];
            pts[ptsCount++] = collision[i, 1];
        }
        beamMakeEffects( x, y, 0, 0, pts, ptsCount );
        for ( var i = 1; i &lt; collisionCount; ++i ) {
            var dir = point_direction( collision[i-1, 0],
                collision[i-1, 1], collision[i, 0], collision[i, 1] );
            var hit = collision_line(
                collision[i-1, 0], collision[i-1, 1],
                collision[i, 0], collision[i, 1],
                enemy, true, true
            );
            while ( instance_exists( hit ) ) {
                with ( hit ) {
                    instance_destroy( );
                }
                hit = collision_line(
                    collision[i-1, 0], collision[i-1, 1],
                    collision[i, 0], collision[i, 1],
                    enemy, true, true
                );
            }
        }
    }
    //Update position
    posIndex = ( ++posIndex % posCount );
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>32,32</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
