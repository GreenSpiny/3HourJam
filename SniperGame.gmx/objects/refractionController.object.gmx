<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-101</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup

showMap = true;
targetShader = refraction_sdr;

distortionSurface = -1;

decayFactor = 0.9;

drawQueue = ds_queue_create();

//uScale = shader_get_uniform(targetShader, "uScale");
s_decay = shader_get_uniform(targetShader, "decay");

//s_rawColorMap = shader_get_sampler_index(targetShader, "rawColorMap");
s_normalMap = shader_get_sampler_index(targetShader, "normalMap");

randomRefractSpawnRate = 100;
alarm[ 0 ] = randomRefractSpawnRate;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clean up

ds_queue_destroy( drawQueue );


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create filler refraction
//instance_create( mouse_x, mouse_y, refractionNormalPar );

if ( surface_exists( distortionSurface ) ) {
    var imageSize = 512 * 2;
    with ( instance_create( -64, -64, refractionNormalPar ) ) {
        image_xscale = surface_get_width( other.distortionSurface ) / imageSize;
        image_yscale = surface_get_height( other.distortionSurface ) / imageSize;
        
    }
}

alarm[ 0 ] = randomRefractSpawnRate;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///TEst


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw on Surfaces

if ( surface_exists( effects_getShaderSurface() ) ) {
    surface_set_target( effects_getShaderSurface() );
    draw_clear_alpha( c_black, 1 );
    d3d_set_projection_ortho( view_xview[0], view_yview[0], view_wview[0], view_hview[0], view_angle[0] );
        while ( !ds_queue_empty( drawQueue ) ) {
            
            var tCurrentObj = ds_queue_dequeue( drawQueue );

            with ( tCurrentObj ) {
                event_user( 0 );
            }
            
        }
    
        with ( refractionEffectPar ) {
            event_user( 0 );
        }
    surface_reset_target();
}
if ( surface_exists( distortionSurface ) ) {
    ///Draw sprites

    surface_set_target( distortionSurface );
        //d3d_set_projection_ortho( view_xview[0], view_yview[0], view_wview[0], view_hview[0], view_angle[0] );
        draw_clear_alpha( c_black, 1 );
        
        with ( refractionNormalPar ) {
            event_user( 0 );
        }
        
    surface_reset_target();

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw

if ( !surface_exists( distortionSurface ) ) {
    distortionSurface = surface_create( view_wview * 0.25, view_hview * 0.25 );
    surface_set_target( distortionSurface );
        draw_clear_alpha( c_black, 1 );
    surface_reset_target();
}

// bind shader.


shader_set(targetShader);
draw_set_blend_mode( bm_add );  
       
    shader_set_uniform_f( s_decay, decayFactor );
    texture_set_stage(s_normalMap, surface_get_texture( distortionSurface ));
    var tGlobalSurface = effects_getShaderSurface();
    
    //surface_set_target( application_surface );
    draw_surface_stretched(tGlobalSurface, view_xview, view_yview, 
                    view_wview, 
                    view_hview);
    //surface_reset_target();

draw_set_blend_mode( bm_normal );   
shader_reset();                 
    //surface_copy( prepSurface, 0, 0, stageSurface ); //Copy the stage back to the prep


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEBUG
if ( global.debugMode &amp;&amp; showMap) {
    if ( surface_exists( effects_getShaderSurface() ) ) {
        draw_surface_stretched( effects_getShaderSurface(), view_xview + 0, view_yview + 900, 300, 250 );
    }
    if ( surface_exists( distortionSurface ) ) {
        draw_surface_stretched( distortionSurface, view_xview + 332, view_yview + 900, 300, 250 );
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
