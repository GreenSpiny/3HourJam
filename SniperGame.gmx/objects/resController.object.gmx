<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Define state variables

baseW = 1024;
baseH = 768;

fullscreenLast = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Resize application surface

var resize = false;

//Desired resolution for application surface
var newResX = ( global.resX * global.resXScale );
var newResY = ( global.resY * global.resYScale );

//Maximum resolution
if ( global.resXMax &gt; 0 ) newResX = max( global.resX, global.resXMax );
if ( global.resYMax &gt; 0 ) newResY = max( global.resY, global.resYMax );

if ( surface_get_width( application_surface ) != newResX ) {
    resize = true;
}
if ( surface_get_height( application_surface ) != newResY ) {
    resize = true;
}

if ( resize ) {
    surface_resize( application_surface, newResX, newResY );
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for window resize

if ( ( window_get_width( ) &gt; 0 ) &amp;&amp; ( window_get_height( ) &gt; 0 ) ) {
    var resize = false;
    if ( window_get_width( ) != global.resX ) {
        global.resX = 0;
        resize = true;
    }
    if ( window_get_height( ) != global.resY ) {
        global.resY = 0;
        resize = true;
    }
    if ( window_get_fullscreen( ) != fullscreenLast ) {
        global.resX = 0;
        global.resY = 0;
        if ( !window_get_fullscreen( ) ) {
            global.resX = baseW;
            global.resY = baseH;
        }
        resize = true;
    }
    
    if ( resize ) {
        event_user( 2 );
        event_user( 1 );
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset view size and position

if ( ( global.resX &gt; 0 ) &amp;&amp; ( global.resY &gt; 0 ) ) {
    var rview = ( global.resX / global.resY );
    var wview = max( ( baseH * rview ), baseW );
    var hview = max( ( baseW / rview ), baseH );
    
    var view = 0;
    if ( !instance_exists( screenShaker ) ) {
        view_xview[view] = ( view_xview[view] + view_wview[view]/2 - wview/2 );
        view_yview[view] = ( view_yview[view] + view_hview[view]/2 - hview/2 );
        view_xview[view] = ( baseW/2 - wview/2 );
        view_yview[view] = ( baseH/2 - hview/2 );
    }
    view_wview[view] = wview;
    view_hview[view] = hview;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update the view port

var view = 0;
view_xport[view] = 0;
view_yport[view] = 0;
view_wport[view] = global.resX;
view_hport[view] = global.resY;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Detect the screen's resolution</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Detect the resolution

var windowW = window_get_width( );
var windowH = window_get_height( );
if ( window_get_fullscreen( ) ) {
    windowW = display_get_width( );
    windowH = display_get_height( );
}
windowW = max( windowW, 1 );
windowH = max( windowH, 1 );
var windowR = ( windowW / windowH );

if ( ( global.resX &lt;= 0 ) &amp;&amp; ( global.resY &lt;= 0 ) ) {
    global.resY = windowH;
}
if ( global.resX &lt;= 0 ) {
    global.resX = round( global.resY * windowR );
} else if ( global.resY &lt;= 0 ) {
    global.resY = round( global.resX / windowR );
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Apply a new resolution to the screen</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Apply the resolution

/*
if ( global.resEnabled ) {
    var fullscreen = window_get_fullscreen( );
    if ( true || ( fullscreen != fullscreenLast ) || !fullscreen ) {
        var px = ( window_get_x( ) + ( window_get_width( ) - global.resX ) / 2 );
        var py = ( window_get_y( ) + ( window_get_height( ) - global.resY ) / 2 );
        //window_set_rectangle( px, py, global.resX, global.resY );
    }
    //surface_resize( application_surface, global.resX, global.resY );
}
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update state

fullscreenLast = window_get_fullscreen( );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Apply resolution

event_user( 1 );
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
